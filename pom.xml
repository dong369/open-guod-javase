<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <packaging>pom</packaging>
    <groupId>cn.hacz.edu</groupId>
    <version>0.0.1-SNAPSHOT</version>

    <artifactId>open-guod-javase</artifactId>
    <name>open-guod-javase</name>
    <description>JavaSE-基础+提升</description>
    <url>https://github.com/looly/hutool</url>

    <developers>
        <developer>
            <name>guodd</name>
            <email>guodd369@gmail.com</email>
        </developer>
    </developers>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <skipTests>true</skipTests>
        <java.home>${JAVA_HOME}</java.home>
        <java.version>${JAVA_VERSION}</java.version>
        <maven.compiler.source>${JAVA_VERSION}</maven.compiler.source>
        <maven.compiler.target>${JAVA_VERSION}</maven.compiler.target>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!-- 功能模块 -->
    <modules>
        <!-- JavaSE+基础知识（《Java核心技术》+《Java编程思想》） -->
        <module>base-01</module>
        <!-- JavaSE+时间处理+金钱处理+格式化处理+常用实用类 -->
        <module>base-02</module>
        <!-- JavaSE+正则表达 -->
        <module>base-03</module>
        <!-- JavaSE+数据结构算法 -->
        <module>base-04</module>
        <!-- JavaSE+设计模式 -->
        <module>base-05</module>
        <!-- JavaSE+书籍《Effective Java》 -->
        <module>base-06</module>
        <!-- JavaSE+Java虚拟机 -->
        <module>base-07</module>
        <!-- JDK源码 -->
        <module>base-08</module>
        <!-- 脚本语言（shell、cmd脚本、及相关的配置文件） -->
        <module>base-09</module>
        <!-- 查询语言 -->
        <module>base-10</module>
    </modules>

    <!-- 全局依赖 -->
    <dependencies>
        <!-- web boot start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Apache工具类 -->
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.7</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.3</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.4.1</version>
        </dependency>
        <!-- 瑞士军刀 -->
        <dependency>
            <groupId>org.jodd</groupId>
            <artifactId>jodd</artifactId>
            <version>3.3.7</version>
        </dependency>
        <!-- 时间 -->
        <dependency>
            <groupId>org.jodd</groupId>
            <artifactId>jodd-core</artifactId>
            <version>5.0.5</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>21.0</version>
        </dependency>
        <!--瑞士军刀封装版-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>4.6.3</version>
        </dependency>
        <!-- 代码简洁，lombok版本太低，不支持java10以上（com.sun.tools.javac.code.TypeTags） -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.4</version>
            <scope>provided</scope>
        </dependency>
        <!-- 单元测试工具类 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <!-- netty -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.37.Final</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>3.8.4</version>
        </dependency>
    </dependencies>
    <build>
        <!--pluginmanagement标签一般用在父pom中，子元素可以包含plugins插件-->
        <pluginManagement>
            <plugins>
                <!-- 一个好习惯，就是在此配置JDK的版本，这样就可以方便代码迁移 By Landy 2019.01.04-->
                <!--一般而言，target与source是保持一致的。但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 。-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.7.0</version>
                    <configuration>
                        <source>${maven.compiler.source}</source> <!-- 源代码使用的开发版本 -->
                        <target>${maven.compiler.target}</target> <!-- 需要生成的目标class文件的编译版本 -->
                        <!-- 这下面的是可选项 -->
                        <meminitial>128m</meminitial>
                        <maxmem>512m</maxmem>
                        <fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 -->
                        <compilerVersion>${java.version}</compilerVersion>
                        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
                        <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>-->
                        <executable>${java.home}/bin/javac</executable>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>